Ponteiro

Cada variável ocupa um lugar na memória, o nome que você coloca na variável é um "apelido" para
um endereço de memória (o nome do endereço é todo zuado, tipo "0x28FF1C").

O ponteiro é uma variável que em vez de armazenar um "conteúdo" usual, possui como conteúdo O
um endereço de memória

Logo, o ponteiro vai ter um tipo, vai estar armazenado em um endereço de memória específico e seu con-
teúdo ao invés de ser um inteiro, um float e etc, vai ser um endereço de memória

Devemos tomar cuidado com a utilização de ponteiros, pois ao errar o endereço de memória, o programa
muitas vezes nem compila

PARA DECLARAR PONTEIROS:
    -Utilizamos o sinal de asterisco.
    -tipo *<nome_do_ponteiro>;
    ex:
        int *pt_num;

    obs:O tipo do ponteiro vai ser compatível com o endereço da variável que ele está armazenando, ou seja,
    ele é igual ao tipo do da variável que está armazenado no seu conteúdo (que é o endereço dessa variável)

    ATENÇÃO: O tamanho do ponteiro tem relação com o tamanho do endereço que ele carrega, ou seja,
    ele pode ter o mesmo tamanho para char, int, float e etc. 

    ATENÇÃO: O asterisco deve vir junto com a variável, caso eu queria que ela seja ponteiro, ex:
    int *p1, p2, p3; - só p1 é ponteiro.
    int *p1,*p2,*p3; - os 3 são ponteiros.

PARA INICIALIZAR PONTEIROS:
    -Utilizamos o "&"
    ex:
        int a=20, *p;
        p=&a;  -Dizemos que p aponta para a, porque ele está armazenando o endereço dela

        MUITA ATENÇÃO:
        p=a - vai passar 20 para p, caso a região da memória estiver livre, o programa executa. Se ela
        estiver ocupada, ao compilar, surgirá o erro de Segmenation Fault (erro de acesso indevido)

        MUITO IMPORTANTE:
        Para checar se a atribuição deu certo, basta atribuir NULL ao ponteiro no momento da inicialização
        ex:
            int a=20, *pt=NULL;
            pt=&a;
            if(pt!=NULL){
                printf("Deu certo");
            }

ACESSANDO O COTENÚDO DE VARIÁVEIS REFERENCIADAS:
    Eu consigo alterar o valor da variável alterando o valor do ponteiro.
        ex:
            int a=20,*p;
            p=&a;
            *p=25; - LEMBRAR DO ASTERISCO (se lê: O conteúdo apontado por p recebe 25, o conteúdo é o a)

        Não faz sentido eu ficar usando isso quando as duas variáveis estão na mesma função, entretanto 
        quando elas estão em duas funções distintas, isso se torna interessante, pois eu consigo alterar 
        o valor de a mesmo ela não estando na função.

USO DO OPERADOR "*":
    - Devemos sempre usar ao declarar um ponteiro
    - Ao atribuir o endereço de uma variável para o ponteiro, não devemos usar
    - Usamos quando precisamos acessar o conteúdo apontado pelo ponteiro

OBSERVAÇÕES:
    -É comum o uso de ponteiro para ponteiro, é uma variável que armazena um endereço de memória, só que
    este endereço armazenado é de outro ponteiro.
    ex:
        int a=20, *p, **c; - SÃO DOIS ASTERISCOS NO PONTEIRO QUE RECEBE O OUTRO
            p=&a;
            c=&p; - obs, ele vai armazenar o endereço de memória de p, não tem nada a ver com o a
